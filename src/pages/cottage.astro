---
import { Image } from 'astro:assets';
import BaseLayout from '../layouts/BaseLayout.astro';
import frontGarden2 from '../assets/front-garden-2.jpg';
import livingRoom1 from '../assets/living-room-1.jpg';
import kitchen1 from '../assets/kitchen-1.jpg';
import fireplace from '../assets/fireplace.jpg';
import mainBedroom1 from '../assets/main-bedroom-1.jpg';
import secondBedroom1 from '../assets/second-bedroom-1.jpg';
import hallway from '../assets/hallway.jpg';
import enSuiteBathroom1 from '../assets/en-suite-bathroom-1.jpg';
import separateBathroom1 from '../assets/separate-bathroom-1.jpg';
---

<BaseLayout 
  title="Clarkia Cottage | Newlands Cottages Accommodation Details"
  description="View photos, amenities, and details for our private self-catering cottage. Features a full kitchen, private garden, and modern comforts."
>
  <div class="container">
    <h1>Clarkia Cottage</h1>
    
    <!-- Mobile Carousel Gallery -->
    <div class="carousel-container">
      <div class="carousel" id="carousel">
        <div class="carousel-track" id="carousel-track">
          <div class="carousel-slide">
            <Image src={frontGarden2} alt="Private garden and outdoor space" class="carousel-image" />
          </div>
          <div class="carousel-slide">
            <Image src={livingRoom1} alt="Living room with comfortable seating area" class="carousel-image" />
          </div>
          <div class="carousel-slide">
            <Image src={kitchen1} alt="Fully equipped kitchen with modern appliances" class="carousel-image" />
          </div>
          <div class="carousel-slide">
            <Image src={fireplace} alt="Cozy fireplace in the living area" class="carousel-image" />
          </div>
          <div class="carousel-slide">
            <Image src={mainBedroom1} alt="Main bedroom with king-size bed" class="carousel-image" />
          </div>
          <div class="carousel-slide">
            <Image src={secondBedroom1} alt="Second bedroom with twin beds" class="carousel-image" />
          </div>
          <div class="carousel-slide">
            <Image src={hallway} alt="Welcoming hallway entrance" class="carousel-image" />
          </div>
          <div class="carousel-slide">
            <Image src={enSuiteBathroom1} alt="En-suite bathroom with shower and modern fittings" class="carousel-image" />
          </div>
          <div class="carousel-slide">
            <Image src={separateBathroom1} alt="Separate bathroom with shower" class="carousel-image" />
          </div>
        </div>
        
        <!-- Navigation Arrows -->
        <button class="carousel-nav carousel-prev" aria-label="Previous image">‹</button>
        <button class="carousel-nav carousel-next" aria-label="Next image">›</button>
        
        <!-- Dot Indicators -->
        <div class="carousel-dots" id="carousel-dots">
          <button class="carousel-dot active" aria-label="Go to image 1" data-index="0"></button>
          <button class="carousel-dot" aria-label="Go to image 2" data-index="1"></button>
          <button class="carousel-dot" aria-label="Go to image 3" data-index="2"></button>
          <button class="carousel-dot" aria-label="Go to image 4" data-index="3"></button>
          <button class="carousel-dot" aria-label="Go to image 5" data-index="4"></button>
          <button class="carousel-dot" aria-label="Go to image 6" data-index="5"></button>
          <button class="carousel-dot" aria-label="Go to image 7" data-index="6"></button>
          <button class="carousel-dot" aria-label="Go to image 8" data-index="7"></button>
          <button class="carousel-dot" aria-label="Go to image 9" data-index="8"></button>
        </div>
      </div>
    </div>
    
    <section>
      <h2>About the Space</h2>
      <p>
        Clarkia Cottage provides comfortable 2-bedroom accommodation for up to four guests. The main bedroom features a king-size bed and a full en-suite bathroom, with the second bathroom including two single beds with access to a shower-only bathroom. The kitchen is thoughtfully equipped with essential appliances, including a fridge, a two-ring gas hob, a convection/microwave oven, and an air fryer. For coffee lovers, there's a Nespresso machine, along with a kettle and toaster. A charming combustion wood fireplace adds to the cosy atmosphere, with a smart TV and reliable Wi-Fi available for entertainment. An inverter and battery-operated lights are available if there is loadshedding. Outside, a small front garden offers a pleasant space, while a private patio at the back features a Weber braai for outdoor cooking and a washing machine for laundry needs. Dedicated parking is available on the wide, paved verge in front of the property, suitable for one vehicle.
        <br><br>
        The surrounding area presents a wealth of activities and attractions. Guests can easily access opportunities for hiking, bird watching, wine tasting, cycling, and swimming, ensuring a memorable stay.
      </p>
    </section>
    
    <section class="amenities">
      <h2>Amenities</h2>
      <ul>
        <li>Queen-size Bed</li>
        <li>High-speed Wi-Fi</li>
        <li>Fully-equipped Kitchenette</li>
        <li>Nespresso Machine</li>
        <li>Private Garden & Patio</li>
        <li>Secure Off-street Parking</li>
        <li>Smart TV with Netflix</li>
        <li>En-suite Bathroom with Shower</li>
      </ul>
    </section>
    
    <section class="booking-section">
      <a href="https://book.nightsbridge.com/12344" target="_blank" class="btn btn-large">
        Check Availability & Book Now
      </a>
    </section>
  </div>

  <!-- Image Gallery Modal -->
  <div id="gallery-modal" class="gallery-modal" aria-hidden="true">
    <div class="modal-content">
      <button class="modal-close" aria-label="Close gallery">✕</button>
      <div class="modal-image-container">
        <img id="modal-image" src="" alt="" class="modal-image" />
      </div>
      <div class="modal-navigation">
        <button class="nav-btn prev-btn" aria-label="Previous image">‹</button>
        <button class="nav-btn next-btn" aria-label="Next image">›</button>
      </div>
    </div>
  </div>

  <!-- Sticky Book Now Banner for Mobile -->
  <div class="sticky-book-banner" id="sticky-banner">
    <div class="banner-content">
      <a href="https://book.nightsbridge.com/12344" target="_blank" class="btn btn-large">
        Check Availability & Book Now
      </a>
      <button class="banner-close" aria-label="Close banner" id="banner-close">✕</button>
    </div>
  </div>

  <script>
    // Carousel functionality
    document.addEventListener('DOMContentLoaded', function() {
      const carousel = document.getElementById('carousel');
      const track = document.getElementById('carousel-track');
      const slides = document.querySelectorAll('.carousel-slide');
      const dots = document.querySelectorAll('.carousel-dot');
      const prevBtn = document.querySelector('.carousel-prev');
      const nextBtn = document.querySelector('.carousel-next');
      const modal = document.getElementById('gallery-modal');
      const modalImage = document.getElementById('modal-image');
      const closeBtn = document.querySelector('.modal-close');
      const modalPrevBtn = document.querySelector('.prev-btn');
      const modalNextBtn = document.querySelector('.next-btn');

      if (!carousel || !track || !slides.length || !dots.length || !prevBtn || !nextBtn) {
        console.error('Required carousel elements not found');
        return;
      }

      let currentIndex = 0;
      const totalSlides = slides.length;
      let isDragging = false;
      let startPos = 0;
      let currentTranslate = 0;
      let prevTranslate = 0;

      // Initialize carousel
      function initCarousel() {
        updateCarousel();
        updateDots();
      }

      // Update carousel position
      function updateCarousel() {
        if (!track || !slides[0]) return;
        const slideWidth = (slides[0] as HTMLElement).offsetWidth;
        track.style.transform = `translateX(-${currentIndex * slideWidth}px)`;
      }

      // Update dot indicators
      function updateDots() {
        dots.forEach((dot, index) => {
          dot.classList.toggle('active', index === currentIndex);
        });
      }

      // Go to specific slide
      function goToSlide(index: number) {
        if (index < 0) index = totalSlides - 1;
        if (index >= totalSlides) index = 0;
        
        currentIndex = index;
        updateCarousel();
        updateDots();
      }

      // Next slide
      function nextSlide() {
        goToSlide(currentIndex + 1);
      }

      // Previous slide
      function prevSlide() {
        goToSlide(currentIndex - 1);
      }

      // Touch/swipe functionality
      function handleTouchStart(e: TouchEvent) {
        if (!track) return;
        isDragging = true;
        startPos = e.touches[0].clientX;
        track.style.transition = 'none';
      }

      function handleTouchMove(e: TouchEvent) {
        if (!isDragging || !track) return;
        
        const currentPos = e.touches[0].clientX;
        const diff = currentPos - startPos;
        currentTranslate = prevTranslate + diff;
        
        track.style.transform = `translateX(${currentTranslate}px)`;
      }

      function handleTouchEnd() {
        if (!isDragging || !track || !slides[0]) return;
        
        isDragging = false;
        track.style.transition = 'transform 0.3s ease';
        
        const slideWidth = (slides[0] as HTMLElement).offsetWidth;
        const threshold = slideWidth * 0.3;
        
        if (Math.abs(currentTranslate - prevTranslate) > threshold) {
          if (currentTranslate > prevTranslate) {
            prevSlide();
          } else {
            nextSlide();
          }
        } else {
          updateCarousel();
        }
        
        prevTranslate = currentTranslate;
      }

      // Modal functionality
      function openModal(index: number) {
        currentIndex = index;
        const slide = slides[index] as HTMLElement;
        const image = slide.querySelector('img') as HTMLImageElement;
        
        if (modalImage && image) {
          // For Astro Image components, we need to get the src from the img element that Astro generates
          (modalImage as HTMLImageElement).src = image.src;
          (modalImage as HTMLImageElement).alt = image.alt;
        }
        
        if (modal) {
          modal.setAttribute('aria-hidden', 'false');
          modal.classList.add('active');
        }
        document.body.style.overflow = 'hidden';
        
        if (closeBtn) (closeBtn as HTMLElement).focus();
      }

      function closeModal() {
        if (modal) {
          modal.setAttribute('aria-hidden', 'true');
          modal.classList.remove('active');
        }
        document.body.style.overflow = '';
      }

      function showModalImage(index: number) {
        if (index < 0) index = totalSlides - 1;
        if (index >= totalSlides) index = 0;
        
        currentIndex = index;
        const slide = slides[index] as HTMLElement;
        const image = slide.querySelector('img') as HTMLImageElement;
        
        if (modalImage && image) {
          // For Astro Image components, we need to get the src from the img element that Astro generates
          (modalImage as HTMLImageElement).src = image.src;
          (modalImage as HTMLImageElement).alt = image.alt;
        }
      }

      function nextModalImage() {
        showModalImage(currentIndex + 1);
      }

      function prevModalImage() {
        showModalImage(currentIndex - 1);
      }

      // Event listeners
      prevBtn.addEventListener('click', prevSlide);
      nextBtn.addEventListener('click', nextSlide);

      dots.forEach((dot, index) => {
        dot.addEventListener('click', () => goToSlide(index));
      });

      // Touch events for carousel
      track.addEventListener('touchstart', handleTouchStart);
      track.addEventListener('touchmove', handleTouchMove);
      track.addEventListener('touchend', handleTouchEnd);

      // Click to enlarge functionality
      slides.forEach((slide, index) => {
        slide.addEventListener('click', () => openModal(index));
        slide.addEventListener('keydown', (e) => {
          const keyboardEvent = e as KeyboardEvent;
          if (keyboardEvent.key === 'Enter' || keyboardEvent.key === ' ') {
            e.preventDefault();
            openModal(index);
          }
        });
      });

      // Modal event listeners
      if (closeBtn) closeBtn.addEventListener('click', closeModal);
      if (modalPrevBtn) modalPrevBtn.addEventListener('click', prevModalImage);
      if (modalNextBtn) modalNextBtn.addEventListener('click', nextModalImage);

      // Close modal when clicking outside
      if (modal) {
        modal.addEventListener('click', (e) => {
          if (e.target === modal) {
            closeModal();
          }
        });
      }

      // Keyboard navigation
      document.addEventListener('keydown', (e) => {
        if (modal && modal.classList.contains('active')) {
          switch (e.key) {
            case 'Escape':
              closeModal();
              break;
            case 'ArrowLeft':
              prevModalImage();
              break;
            case 'ArrowRight':
              nextModalImage();
              break;
          }
        }
      });

      // Handle window resize
      window.addEventListener('resize', updateCarousel);

      // Initialize carousel
      initCarousel();

      // Sticky banner functionality
      const stickyBanner = document.getElementById('sticky-banner');
      const bannerClose = document.getElementById('banner-close');
      const bookingSection = document.querySelector('.booking-section');

      if (stickyBanner && bannerClose && bookingSection) {
        // Helper function to check if we're on mobile
        const isMobile = () => window.innerWidth <= 768;

        // Close banner functionality
        bannerClose.addEventListener('click', () => {
          stickyBanner.style.display = 'none';
          // Store preference in localStorage
          localStorage.setItem('banner-closed', 'true');
        });

        // Check if banner was previously closed
        if (localStorage.getItem('banner-closed') === 'true') {
          stickyBanner.style.display = 'none';
        }

        // Intersection Observer to hide banner when booking section is visible
        const observer = new IntersectionObserver((entries) => {
          entries.forEach((entry) => {
            if (entry.isIntersecting) {
              stickyBanner.style.display = 'none';
            } else {
              // Only show banner on mobile and if it wasn't manually closed
              if (isMobile() && localStorage.getItem('banner-closed') !== 'true') {
                stickyBanner.style.display = 'block';
              }
            }
          });
        }, {
          threshold: 0.1 // Trigger when 10% of booking section is visible
        });

        observer.observe(bookingSection);

        // Handle window resize to show/hide banner appropriately
        window.addEventListener('resize', () => {
          if (!isMobile()) {
            stickyBanner.style.display = 'none';
          } else if (localStorage.getItem('banner-closed') !== 'true') {
            stickyBanner.style.display = 'block';
          }
        });
      }
    });
  </script>
</BaseLayout> 